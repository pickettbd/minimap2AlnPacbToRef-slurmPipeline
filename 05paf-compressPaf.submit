#! /bin/bash

# Ensure we're running from the correct location
CWD_check()
{
	#local SCRIPTS_DIR
	local MAIN_DIR
	local RUN_DIR

	SCRIPTS_DIR=$(readlink -f `dirname "${BASH_SOURCE[0]}"`)
	MAIN_DIR=$(readlink -f `dirname "${SCRIPTS_DIR}/"`)
	RUN_DIR=$(readlink -f .)

	if [ "${RUN_DIR}" != "${MAIN_DIR}" ] || ! [[ "${SCRIPTS_DIR}" =~ ^"${MAIN_DIR}"/scripts.* ]]
	then
		printf "\n\t%s\n\t%s\n\n" "Script must be run from ${MAIN_DIR}" "You are currently at:   ${RUN_DIR}" 1>&2
		exit 1
	fi
}
CWD_check

submitJob()
{
	local JOB_NAME PAF_ALN

	JOB_NAME="${1}"
	PAF_ALN="${2}"

	sbatch \
		-J ${JOB_NAME} \
		--signal=B:USR1@60 \
		--time=0-01:00:00 \
		--nodes=1 \
		--ntasks=1 \
		--cpus-per-task=1 \
		--mem=8G \
		-o job_files/%x__%j.out \
		-e job_files/%x__%j.err \
		"${SCRIPTS_DIR}"/compressPaf.slurm \
		"${PAF_ALN}"
		#--array=${ARRAY_JOBS}%${JOBS_AT_ONCE} \
		#-o job_files/%x__%A-%a.out \
		#-e job_files/%x__%A-%a.err \
}

# ###################################### #
# sanity check on input and output files #
# ###################################### #

source "data/vars-longAln.list"
# define key variables
SPECIES="gt"
DATA_DIR="data"
PD_DIR="${DATA_DIR}/purge_dups"

while read ASM
do
	ASM_PATH="data/assembly/${ASM}"
	ASM_BASE="`basename ${ASM%%.fa*}`"
	ASSEMBLY_IDX="${ASM_PATH%%.fa*}.mmi"
	
	while IFS=$'\t' read -r -a READS_FA
	do
		i=0
		while [ ${i} -lt ${#READS_FA[@]} ]
		do
			READS_FA[${i}]=data/pacbio/${READS_FA[${i}]}
			i=$((${i}+1))
		done

		READS_BASE="`basename ${READS_FA[0]%%.fa*}`"
		READS_BASE=`printf '%s' "${READS_BASE}" | sed -r 's,[_.-]*[0-9]+$,,'`

		# define key variables
		PAF="data/alignments/pacb_${READS_BASE}-x-${ASM_BASE}.paf"
		declare -a INPUT_FILES=("${SAM}")

		EXIT_EARLY=0

		# check for existence of needed input files
		for INPUT_FILE in "${INPUT_FILES[@]}"
		do
			if [ ! -e "${INPUT_FILE}" ]
			then
				printf "%s\n" "ERROR: Required input file does not exist: ${INPUT_FILE}" 1>&2
				EXIT_EARLY=1
			fi
		done

		# check if the expected output already exists
		if [ -e "${PAF}.gz" ]
		then
			printf "%s\n" \
				"INFO: Skipping ${PAF%%.paf}; the paf file appears to already be compressed." \
				"To run this one, first delete ${PAF}.gz." \
				1>&2
			continue
		fi

		# ####################### #
		# actually submit the job #
		# ####################### #

		HPC_JOB_NAME="${PROJECT}_${SPECIES}_${READS_BASE}2${ASM_BASE}-compressPaf"
		submitJob \
			"${HPC_JOB_NAME}" \
			"${PAF}"
		unset HPC_JOB_NAME PAF

	done < data/pacbs.list
done < data/asms.list

# 36889878. 0-00:24:33. 98% (1) CPU. 42% (8G) RAM. (This was for a paf file that was ~24G)
